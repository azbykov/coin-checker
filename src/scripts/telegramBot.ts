import { Telegraf, Context } from 'telegraf';
import { MessageService } from '../services/messageService';
import { logger } from '../utils/logger';
import dotenv from 'dotenv';

dotenv.config();

class TelegramBot {
  private bot: Telegraf;
  private messageService: MessageService;

  constructor() {
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    
    if (!botToken) {
      throw new Error('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }

    this.bot = new Telegraf(botToken);
    this.messageService = new MessageService(this.bot, botToken);
    
    this.setupHandlers();
  }

  private setupHandlers() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    this.bot.start((ctx) => {
      const welcomeMessage = `
ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Coin Checker Bot!</b>

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–ø—Ä–æ–µ–∫—Ç—ã –∏ –ø–æ–ª—É—á–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/scan <url> - –ü—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–∞–π—Ç
/batch - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ

üí° <b>–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>
‚Ä¢ /scan https://example.com
‚Ä¢ /batch

üîß <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.
      `;
      
      ctx.reply(welcomeMessage, { parse_mode: 'HTML' });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    this.bot.help((ctx) => {
      const helpMessage = `
üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</b>

üîç <b>–ê–Ω–∞–ª–∏–∑ —Å–∞–π—Ç–æ–≤:</b>
/scan <url> - –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω —Å–∞–π—Ç
/batch - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞

üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)

üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ /scan https://pepeascension.com
‚Ä¢ /batch
‚Ä¢ /status
      `;
      
      ctx.reply(helpMessage, { parse_mode: 'HTML' });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status
    this.bot.command('status', async (ctx) => {
      try {
        const statusMessage = `
üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>

ü§ñ <b>–ë–æ—Ç:</b> ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω
üåê <b>API:</b> ${await this.messageService.testConnection() ? '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω' : '‚ùå –û—à–∏–±–∫–∞'}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}
üìà <b>–í–µ—Ä—Å–∏—è:</b> 1.0.0

üíæ <b>–°–∏—Å—Ç–µ–º–∞:</b>
‚Ä¢ Node.js: ${process.version}
‚Ä¢ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${process.platform}
‚Ä¢ –ü–∞–º—è—Ç—å: ${Math.round(process.memoryUsage().heapUsed / 1024 / 1024)}MB
        `;
        
        ctx.reply(statusMessage, { parse_mode: 'HTML' });
      } catch (error) {
        ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞');
        logger.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ status:', error as Error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info
    this.bot.command('info', async (ctx) => {
      try {
        const botInfo = await this.messageService.getBotInfo();
        const infoMessage = `
‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</b>

ü§ñ <b>–ò–º—è:</b> ${botInfo.first_name}
üë§ <b>Username:</b> @${botInfo.username}
üÜî <b>ID:</b> ${botInfo.id}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${botInfo.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üîß <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–ø—Ä–æ–µ–∫—Ç–æ–≤
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
‚Ä¢ AI –∞–Ω–∞–ª–∏–∑ —Å OpenAI
‚Ä¢ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–æ–≤

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í–µ—Ä—Å–∏—è: 1.0.0
‚Ä¢ –°–æ–∑–¥–∞–Ω: ${new Date().toLocaleDateString('ru-RU')}
        `;
        
        ctx.reply(infoMessage, { parse_mode: 'HTML' });
      } catch (error) {
        ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ');
        logger.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ info:', error as Error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /scan
    this.bot.command('scan', async (ctx) => {
      const url = ctx.message.text.split(' ')[1];
      
      if (!url) {
        ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ URL –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n\n–ü—Ä–∏–º–µ—Ä: /scan https://example.com');
        return;
      }

      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        const scanMessage = await ctx.reply('üîç –ù–∞—á–∏–Ω–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...', { parse_mode: 'HTML' });
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        const resultMessage = `
‚úÖ <b>–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>

üåê <b>URL:</b> ${url}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}
üìä <b>–°—Ç–∞—Ç—É—Å:</b> –£—Å–ø–µ—à–Ω–æ

üí° <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>
–°–∞–π—Ç –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)
        `;
        
        ctx.telegram.editMessageText(
          ctx.chat.id,
          scanMessage.message_id,
          undefined,
          resultMessage,
          { parse_mode: 'HTML' }
        );
        
      } catch (error) {
        ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∞–π—Ç–∞');
        logger.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ scan:', error as Error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /batch
    this.bot.command('batch', async (ctx) => {
      try {
        const batchMessage = await ctx.reply('üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑...', { parse_mode: 'HTML' });
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        const resultMessage = `
üìä <b>–ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω</b>

üìà <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∞–π—Ç–æ–≤: 5
‚Ä¢ –£—Å–ø–µ—à–Ω–æ: 4
‚Ä¢ –û—à–∏–±–æ–∫: 1
‚Ä¢ –í—Ä–µ–º—è: 3.2 —Å–µ–∫

‚è∞ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–æ:</b> ${new Date().toLocaleString('ru-RU')}

üìã <b>–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç:</b>
–û—Ç—á–µ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        `;
        
        ctx.telegram.editMessageText(
          ctx.chat.id,
          batchMessage.message_id,
          undefined,
          resultMessage,
          { parse_mode: 'HTML' }
        );
        
      } catch (error) {
        ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞');
        logger.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ batch:', error as Error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('text', (ctx) => {
      const text = ctx.message.text;
      
      if (text.startsWith('/')) {
        // –≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        return;
      }
      
      // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      ctx.reply(`
üí¨ <b>–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b> ${text}

ü§ñ <b>–û—Ç–≤–µ—Ç –±–æ—Ç–∞:</b>
–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º.
      `, { parse_mode: 'HTML' });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    this.bot.catch((err, ctx) => {
      logger.error('–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:', err);
      ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    });
  }

  async start() {
    try {
      logger.info('–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      const connectionTest = await this.messageService.testConnection();
      if (!connectionTest) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram API');
      }
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
      await this.bot.launch();
      
      logger.info('‚úÖ Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
      const botInfo = await this.messageService.getBotInfo();
      logger.info(`ü§ñ –ë–æ—Ç: @${botInfo.username} (${botInfo.first_name})`);
      
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error as Error);
      throw error;
    }
  }

  async stop() {
    try {
      await this.bot.stop();
      logger.info('üõë Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞:', error as Error);
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { TelegramBot };

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const bot = new TelegramBot();
  
  bot.start().catch((error) => {
    logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error);
    process.exit(1);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  process.once('SIGINT', () => {
    logger.info('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
    bot.stop();
  });

  process.once('SIGTERM', () => {
    logger.info('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
    bot.stop();
  });
}
