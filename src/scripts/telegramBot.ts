import { Telegraf } from 'telegraf';
import { MessageService } from '../services/messageService';
import { ScreenshotTelegramService } from '../services/screenshotTelegramService';
import { logger } from '../utils/logger';
import dotenv from 'dotenv';

dotenv.config();

class TelegramBot {
  private bot: Telegraf;
  private messageService: MessageService;
  private screenshotTelegramService: ScreenshotTelegramService;

  constructor() {
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    
    if (!botToken) {
      throw new Error('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }

    this.bot = new Telegraf(botToken);
    this.messageService = new MessageService(this.bot, botToken);
    this.screenshotTelegramService = new ScreenshotTelegramService(this.bot, botToken);
    
    this.setupHandlers();
  }

  private setupHandlers() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    this.bot.start((ctx) => {
      const welcomeMessage = `
ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Coin Checker Bot!</b>

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–ø—Ä–æ–µ–∫—Ç—ã –∏ –ø–æ–ª—É—á–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/scan <url> - –ü—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–∞–π—Ç
/screenshot <url> [selector] - –°–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç
/batch - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ (–∞–¥–º–∏–Ω)

üí° <b>–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>
‚Ä¢ /scan https://example.com
‚Ä¢ /screenshot https://example.com
‚Ä¢ /screenshot https://example.com .price
‚Ä¢ /batch

üîß <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.
      `;
      
      ctx.reply(welcomeMessage, { parse_mode: 'HTML' });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    this.bot.help((ctx) => {
      const helpMessage = `
üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</b>

üîç <b>–ê–Ω–∞–ª–∏–∑ —Å–∞–π—Ç–æ–≤:</b>
/scan <url> - –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω —Å–∞–π—Ç
/screenshot <url> [selector] - –°–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–∞–π—Ç–∞ –∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
/multi <url> <selector1> <selector2> ... - –°–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
/batch - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞

üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)

üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ /scan https://pepeascension.com
‚Ä¢ /screenshot https://example.com
‚Ä¢ /screenshot https://example.com .price
‚Ä¢ /multi https://example.com .header .content .footer
‚Ä¢ /batch
‚Ä¢ /status
      `;
      
      ctx.reply(helpMessage, { parse_mode: 'HTML' });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status
    this.bot.command('status', async (ctx) => {
      try {
        const statusMessage = `
üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>

ü§ñ <b>–ë–æ—Ç:</b> ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω
üåê <b>API:</b> ${await this.messageService.testConnection() ? '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω' : '‚ùå –û—à–∏–±–∫–∞'}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}
üìà <b>–í–µ—Ä—Å–∏—è:</b> 1.0.0

üíæ <b>–°–∏—Å—Ç–µ–º–∞:</b>
‚Ä¢ Node.js: ${process.version}
‚Ä¢ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${process.platform}
‚Ä¢ –ü–∞–º—è—Ç—å: ${Math.round(process.memoryUsage().heapUsed / 1024 / 1024)}MB
        `;
        
        ctx.reply(statusMessage, { parse_mode: 'HTML' });
      } catch (error) {
        ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞');
        logger.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ status:', error as Error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info
    this.bot.command('info', async (ctx) => {
      try {
        const botInfo = await this.messageService.getBotInfo();
        const infoMessage = `
‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</b>

ü§ñ <b>–ò–º—è:</b> ${botInfo.first_name}
üë§ <b>Username:</b> @${botInfo.username}
üÜî <b>ID:</b> ${botInfo.id}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${botInfo.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üîß <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–ø—Ä–æ–µ–∫—Ç–æ–≤
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
‚Ä¢ AI –∞–Ω–∞–ª–∏–∑ —Å OpenAI
‚Ä¢ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–æ–≤

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í–µ—Ä—Å–∏—è: 1.0.0
‚Ä¢ –°–æ–∑–¥–∞–Ω: ${new Date().toLocaleDateString('ru-RU')}
        `;
        
        ctx.reply(infoMessage, { parse_mode: 'HTML' });
      } catch (error) {
        ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ');
        logger.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ info:', error as Error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    this.bot.command('stop', async (ctx) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
      const adminChatId = process.env.TELEGRAM_CHAT_ID;
      if (ctx.chat.id.toString() !== adminChatId) {
        ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
        return;
      }

      try {
        await ctx.reply('üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...', { parse_mode: 'HTML' });
        logger.info(`–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: ${ctx.chat.id}`);
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
        await this.stop();
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        process.exit(0);
      } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞:', error as Error);
        ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /scan
    this.bot.command('scan', async (ctx) => {
      const url = ctx.message.text.split(' ')[1];
      
      if (!url) {
        ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ URL –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n\n–ü—Ä–∏–º–µ—Ä: /scan https://example.com');
        return;
      }

      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        const scanMessage = await ctx.reply('üîç –ù–∞—á–∏–Ω–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...', { parse_mode: 'HTML' });
        
        // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        const result = await this.screenshotTelegramService.processScreenshot(
          url,
          {
            saveToDisk: true,
            savePath: './screenshots',
            sendToTelegram: true,
            chatId: ctx.chat.id.toString(),
            caption: `–°–∫—Ä–∏–Ω—à–æ—Ç —Å–∞–π—Ç–∞ ${url}`,
            format: 'png'
          }
        );
        
        if (result.success) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
          const resultMessage = `
‚úÖ <b>–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>

üåê <b>URL:</b> ${url}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}
üìä <b>–°—Ç–∞—Ç—É—Å:</b> –£—Å–ø–µ—à–Ω–æ
‚è± <b>–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:</b> ${result.processingTime}ms

üí° <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>
‚Ä¢ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
‚Ä¢ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
${result.savedPath ? `‚Ä¢ –ü—É—Ç—å: ${result.savedPath}` : ''}
          `;
          
          ctx.telegram.editMessageText(
            ctx.chat.id,
            scanMessage.message_id,
            undefined,
            resultMessage,
            { parse_mode: 'HTML' }
          );
        } else {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
          const errorMessage = `
‚ùå <b>–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</b>

üåê <b>URL:</b> ${url}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}
üìä <b>–°—Ç–∞—Ç—É—Å:</b> –û—à–∏–±–∫–∞

üí° <b>–û—à–∏–±–∫–∞:</b> ${result.error}
          `;
          
          ctx.telegram.editMessageText(
            ctx.chat.id,
            scanMessage.message_id,
            undefined,
            errorMessage,
            { parse_mode: 'HTML' }
          );
        }
        
      } catch (error) {
        ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∞–π—Ç–∞');
        logger.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ scan:', error as Error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /multi –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
    this.bot.command('multi', async (ctx) => {
      const args = ctx.message.text.split(' ');
      const url = args[1];
      const selectors = args.slice(2);
      
      if (!url) {
        ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ URL –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞\n\n–ü—Ä–∏–º–µ—Ä—ã:\n/multi https://example.com .selector1 .selector2\n/multi https://example.com #header .content');
        return;
      }

      if (selectors.length === 0) {
        ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–µ–ª–µ–∫—Ç–æ—Ä\n\n–ü—Ä–∏–º–µ—Ä—ã:\n/multi https://example.com .selector1 .selector2\n/multi https://example.com #header .content');
        return;
      }

      try {
        const scanMessage = await ctx.reply(`üì∏ –°–æ–∑–¥–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –¥–ª—è ${selectors.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤...`, { parse_mode: 'HTML' });
        
        const result = await this.screenshotTelegramService.processMultipleScreenshots(
          url,
          {
            saveToDisk: true,
            savePath: './screenshots',
            sendToTelegram: true,
            chatId: ctx.chat.id.toString(),
            caption: `–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Å —Å–∞–π—Ç–∞ ${url}`,
            selectors: selectors,
            format: 'png'
          }
        );
        
        if (result.success) {
          const successCount = result.screenshots.filter(s => !s.error).length;
          const errorCount = result.screenshots.filter(s => s.error).length;
          
          const resultMessage = `
‚úÖ <b>–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–æ–∑–¥–∞–Ω—ã</b>

üåê <b>URL:</b> ${url}
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤: ${selectors.length}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ: ${successCount}
‚Ä¢ –û—à–∏–±–æ–∫: ${errorCount}
‚è± <b>–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:</b> ${result.processingTime}ms

${errorCount > 0 ? `‚ùå <b>–û—à–∏–±–∫–∏:</b>\n${result.screenshots.filter(s => s.error).map(s => `‚Ä¢ ${s.selector}: ${s.error}`).join('\n')}\n` : ''}
‚úÖ <b>–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã:</b>
${result.screenshots.filter(s => !s.error).map(s => `‚Ä¢ ${s.selector}`).join('\n')}
          `;
          
          ctx.telegram.editMessageText(
            ctx.chat.id,
            scanMessage.message_id,
            undefined,
            resultMessage,
            { parse_mode: 'HTML' }
          );
        } else {
          const errorMessage = `
‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤</b>

üåê <b>URL:</b> ${url}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}
üìä <b>–°—Ç–∞—Ç—É—Å:</b> –û—à–∏–±–∫–∞

üí° <b>–î–µ—Ç–∞–ª–∏:</b>
${result.screenshots.map(s => `‚Ä¢ ${s.selector}: ${s.error || '–£—Å–ø–µ—à–Ω–æ'}`).join('\n')}
          `;
          
          ctx.telegram.editMessageText(
            ctx.chat.id,
            scanMessage.message_id,
            undefined,
            errorMessage,
            { parse_mode: 'HTML' }
          );
        }
        
      } catch (error) {
        ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤');
        logger.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ multi:', error as Error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /batch
    this.bot.command('batch', async (ctx) => {
      try {
        const batchMessage = await ctx.reply('üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑...', { parse_mode: 'HTML' });
        
        // –°–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏–∑ —Ñ–∞–π–ª–∞)
        const sites = [
          'https://pepeascension.com',
          'https://google.com',
          'https://github.com'
        ];
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        await ctx.telegram.editMessageText(
          ctx.chat.id,
          batchMessage.message_id,
          undefined,
          `üîÑ <b>–ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—É—â–µ–Ω</b>\n\nüìã <b>–°–∞–π—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:</b> ${sites.length}\n‚è∞ <b>–ù–∞—á–∞—Ç–æ:</b> ${new Date().toLocaleString('ru-RU')}`,
          { parse_mode: 'HTML' }
        );
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        const results = await this.screenshotTelegramService.processScreenshots(
          sites,
          {
            saveToDisk: true,
            savePath: './screenshots',
            sendToTelegram: false, // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
            format: 'png'
          }
        );
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â–∏–π –æ—Ç—á–µ—Ç
        await this.screenshotTelegramService.sendBatchReport(results, ctx.chat.id.toString());
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        const successful = results.filter(r => r.success).length;
        const failed = results.length - successful;
        const totalTime = results.reduce((sum, r) => sum + r.processingTime, 0);
        
        const resultMessage = `
üìä <b>–ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω</b>

üìà <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∞–π—Ç–æ–≤: ${results.length}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ: ${successful}
‚Ä¢ –û—à–∏–±–æ–∫: ${failed}
‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalTime}ms
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${Math.round(totalTime / results.length)}ms

‚è∞ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–æ:</b> ${new Date().toLocaleString('ru-RU')}

üìã <b>–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç:</b>
–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        `;
        
        ctx.telegram.editMessageText(
          ctx.chat.id,
          batchMessage.message_id,
          undefined,
          resultMessage,
          { parse_mode: 'HTML' }
        );
        
      } catch (error) {
        ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞');
        logger.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ batch:', error as Error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /screenshot
    this.bot.command('screenshot', async (ctx) => {
      const args = ctx.message.text.split(' ');
      const url = args[1];
      const selector = args[2];
      
      if (!url) {
        ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ URL –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞\n\n–ü—Ä–∏–º–µ—Ä—ã:\n/screenshot https://example.com\n/screenshot https://example.com .selector');
        return;
      }

      try {
        const scanMessage = await ctx.reply('üì∏ –°–æ–∑–¥–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç...', { parse_mode: 'HTML' });
        
        const result = await this.screenshotTelegramService.processScreenshot(
          url,
          {
            saveToDisk: true,
            savePath: './screenshots',
            sendToTelegram: true,
            chatId: ctx.chat.id.toString(),
            caption: selector ? `–°–∫—Ä–∏–Ω—à–æ—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ "${selector}" —Å —Å–∞–π—Ç–∞ ${url}` : `–°–∫—Ä–∏–Ω—à–æ—Ç —Å–∞–π—Ç–∞ ${url}`,
            selector: selector,
            format: 'png'
          }
        );
        
        if (result.success) {
          const resultMessage = `
‚úÖ <b>–°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–∑–¥–∞–Ω</b>

üåê <b>URL:</b> ${url}
${selector ? `üéØ <b>–°–µ–ª–µ–∫—Ç–æ—Ä:</b> ${selector}\n` : ''}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}
‚è± <b>–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:</b> ${result.processingTime}ms

üí° <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>
‚Ä¢ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç
‚Ä¢ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
          `;
          
          ctx.telegram.editMessageText(
            ctx.chat.id,
            scanMessage.message_id,
            undefined,
            resultMessage,
            { parse_mode: 'HTML' }
          );
        } else {
          const errorMessage = `
‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞</b>

üåê <b>URL:</b> ${url}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}

üí° <b>–û—à–∏–±–∫–∞:</b> ${result.error}
          `;
          
          ctx.telegram.editMessageText(
            ctx.chat.id,
            scanMessage.message_id,
            undefined,
            errorMessage,
            { parse_mode: 'HTML' }
          );
        }
        
      } catch (error) {
        ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞');
        logger.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ screenshot:', error as Error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('text', (ctx) => {
      const text = ctx.message.text;
      
      if (text.startsWith('/')) {
        // –≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        return;
      }
      
      // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      ctx.reply(`
üí¨ <b>–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b> ${text}

ü§ñ <b>–û—Ç–≤–µ—Ç –±–æ—Ç–∞:</b>
–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º.
      `, { parse_mode: 'HTML' });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    this.bot.catch((err, ctx) => {
      logger.error('–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:', err);
      ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    });
  }

  async start() {
    try {
      logger.info('–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      const connectionTest = await this.messageService.testConnection();
      if (!connectionTest) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram API');
      }
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
      await this.bot.launch();
      
      logger.info('‚úÖ Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
      const botInfo = await this.messageService.getBotInfo();
      logger.info(`ü§ñ –ë–æ—Ç: @${botInfo.username} (${botInfo.first_name})`);
      
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error as Error);
      throw error;
    }
  }

  async stop() {
    try {
      logger.info('üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram –±–æ—Ç–∞...');
      await this.bot.stop();
      logger.info('‚úÖ Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞:', error as Error);
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { TelegramBot };

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const bot = new TelegramBot();
  
  bot.start().catch((error) => {
    logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error);
    process.exit(1);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  process.once('SIGINT', async () => {
    logger.info('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
    await bot.stop();
    process.exit(0);
  });

  process.once('SIGTERM', async () => {
    logger.info('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
    await bot.stop();
    process.exit(0);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
  process.on('uncaughtException', (error) => {
    logger.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    bot.stop().finally(() => {
      process.exit(1);
    });
  });

  process.on('unhandledRejection', (reason, promise) => {
    logger.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
    bot.stop().finally(() => {
      process.exit(1);
    });
  });
}
