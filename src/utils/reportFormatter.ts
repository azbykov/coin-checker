// TODO: –ó–∞–¥–∞—á–∞ 15 - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–æ–≤
// –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤—ã—Ö HTML –æ—Ç—á—ë—Ç–æ–≤ –¥–ª—è Telegram
// –í—Ö–æ–¥: –î–∞–Ω–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ-–ø—Ä–æ–µ–∫—Ç–æ–≤
// –í—ã—Ö–æ–¥: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π HTML —Ç–µ–∫—Å—Ç
// –û—à–∏–±–∫–∏: –ù–µ—Ç

import { CryptoProjectData, ProcessingResult } from '../types';

export class ReportFormatter {
  static formatSingleProject(data: CryptoProjectData): string {
    return `
<b>üìä –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ-–ø—Ä–æ–µ–∫—Ç–∞</b>

üîó <b>URL:</b> <a href="${data.url}">${data.url}</a>
‚è∞ <b>–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞:</b> ${data.timestamp.toLocaleString('ru-RU')}

üí∞ <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> ${data.currentPrice}
üìà <b>–¶–µ–Ω–∞ –ø—Ä–∏ –ª–∏—Å—Ç–∏–Ω–≥–µ:</b> ${data.listingPrice}
üíµ <b>–°–æ–±—Ä–∞–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤:</b> ${data.raised}
    `.trim();
  }

  static formatMultipleProjects(results: ProcessingResult[]): string {
    const successfulResults = results.filter(r => r.success && r.data);
    const failedResults = results.filter(r => !r.success);

    let report = `
<b>üìä –û—Ç—á—ë—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∫—Ä–∏–ø—Ç–æ-–ø—Ä–æ–µ–∫—Ç–æ–≤</b>

üìà <b>–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> ${successfulResults.length}
‚ùå <b>–û—à–∏–±–æ–∫:</b> ${failedResults.length}
‚è±Ô∏è <b>–û–±—â–µ–µ –≤—Ä–µ–º—è:</b> ${this.calculateTotalTime(results)}–º—Å

`;

    if (successfulResults.length > 0) {
      report += '\n<b>‚úÖ –£—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n\n';
      
      successfulResults.forEach((result, index) => {
        const data = result.data!;
        report += `
<b>${index + 1}. –ü—Ä–æ–µ–∫—Ç</b>
üîó ${data.url}
üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${data.currentPrice}
üìà –¶–µ–Ω–∞ –ª–∏—Å—Ç–∏–Ω–≥–∞: ${data.listingPrice}
üíµ –°–æ–±—Ä–∞–Ω–æ: ${data.raised}
‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${result.processingTime}–º—Å

`;
      });
    }

    if (failedResults.length > 0) {
      report += '\n<b>‚ùå –û—à–∏–±–∫–∏:</b>\n\n';
      
      failedResults.forEach((result, index) => {
        report += `
<b>${index + 1}. ${result.url}</b>
‚ùå ${result.error}
‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${result.processingTime}–º—Å

`;
      });
    }

    return report.trim();
  }

  static formatSummary(results: ProcessingResult[]): string {
    const successful = results.filter(r => r.success).length;
    const failed = results.filter(r => !r.success).length;
    const totalTime = this.calculateTotalTime(results);

    return `
<b>üìä –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç</b>

‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successful}
‚ùå –û—à–∏–±–æ–∫: ${failed}
‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalTime}–º—Å
üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${Math.round(totalTime / results.length)}–º—Å
    `.trim();
  }

  private static calculateTotalTime(results: ProcessingResult[]): number {
    return results.reduce((sum, result) => sum + result.processingTime, 0);
  }
} 