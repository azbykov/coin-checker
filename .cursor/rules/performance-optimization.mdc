---
description: Правила для оптимизации производительности и управления ресурсами
---

# Оптимизация производительности

## Управление браузером

### Пул браузеров
- Используйте ограниченное количество экземпляров браузера
- Переиспользуйте страницы для множественных запросов
- Закрывайте неиспользуемые вкладки

### Настройки Puppeteer
```typescript
const browser = await puppeteer.launch({
  headless: true,
  args: [
    '--no-sandbox',
    '--disable-setuid-sandbox',
    '--disable-dev-shm-usage',
    '--disable-accelerated-2d-canvas',
    '--no-first-run',
    '--no-zygote',
    '--disable-gpu'
  ]
});
```

## Параллельная обработка

### Ограничения
- `MAX_CONCURRENT_REQUESTS=3` - максимум параллельных запросов
- Используйте `Promise.allSettled()` вместо `Promise.all()`
- Обрабатывайте ошибки независимо для каждого запроса

### Пример
```typescript
const results = await Promise.allSettled(
  urls.map(url => processUrl(url))
);

const successful = results
  .filter(result => result.status === 'fulfilled')
  .map(result => result.value);
```

## Кэширование

### OpenAI API
- Кэшируйте одинаковые запросы к Vision API
- Используйте хеши изображений как ключи кэша
- Ограничивайте размер кэша

### Скриншоты
- Сохраняйте скриншоты для повторного использования
- Используйте временные файлы в папке `temp/`
- Очищайте старые файлы периодически

## Оптимизация изображений

### Качество скриншотов
```typescript
await page.screenshot({
  type: 'jpeg',
  quality: 80,  // Баланс качества и размера
  fullPage: true
});
```

### Размеры
- Используйте viewport 1920x1080 для консистентности
- Обрезайте скриншоты до нужных селекторов
- Сжимайте изображения перед отправкой в API

## Мониторинг ресурсов

### Логирование производительности
```typescript
const startTime = Date.now();
// ... операция ...
const duration = Date.now() - startTime;
logger.info(`Operation completed in ${duration}ms`);
```

### Метрики
- Время обработки каждого URL
- Количество успешных/неуспешных запросов
- Использование памяти браузера
- Размер создаваемых файлов

## Graceful shutdown

### Очистка ресурсов
```typescript
async function cleanup(): Promise<void> {
  // Закрыть все браузеры
  await browserService.cleanup();
  
  // Очистить временные файлы
  await cleanupTempFiles();
  
  // Закрыть соединения
  await telegramService.cleanup();
}
```

### Обработка сигналов
- Перехватывайте SIGINT и SIGTERM
- Завершайте активные операции корректно
- Сохраняйте промежуточные результаты

## Рекомендации

1. **Мониторьте память** - используйте `process.memoryUsage()`
2. **Ограничивайте таймауты** - не ждите бесконечно
3. **Используйте очереди** - для больших объёмов данных
4. **Тестируйте нагрузку** - на реальных данных
5. **Логируйте метрики** - для анализа производительности