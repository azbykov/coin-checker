#!/usr/bin/env tsx

import 'dotenv/config';
import { BatchSiteAnalyzer } from './batchSiteAnalyzer';
import { logger } from '../utils/logger';

async function example(): Promise<void> {
  try {
    logger.info('üöÄ –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è BatchSiteAnalyzer —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤');
    
    // –ü—Ä–∏–º–µ—Ä 1: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    logger.info('üìÅ –ü—Ä–∏–º–µ—Ä 1: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å –ø–∞–ø–∫–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (screenshots/)');
    const analyzer1 = new BatchSiteAnalyzer();
    await analyzer1.run();
    
    // –ü—Ä–∏–º–µ—Ä 2: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –ø–∞–ø–∫–æ–π
    logger.info('üìÅ –ü—Ä–∏–º–µ—Ä 2: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –ø–∞–ø–∫–æ–π (output/my-screenshots/)');
    const analyzer2 = new BatchSiteAnalyzer('output/my-screenshots');
    await analyzer2.run();
    
    logger.info('‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ', error as Error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞
if (require.main === module) {
  example().catch((error) => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}
