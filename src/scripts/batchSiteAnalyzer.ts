// TODO: –ó–∞–¥–∞—á–∞ - –ê–Ω–∞–ª–∏–∑ –º–∞—Å—Å–∏–≤–∞ —Å–∞–π—Ç–æ–≤
// –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ê–Ω–∞–ª–∏–∑ —Å–ø–∏—Å–∫–∞ —Å–∞–π—Ç–æ–≤ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Telegram
// –í—Ö–æ–¥: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å —Å–∞–π—Ç–∞–º–∏
// –í—ã—Ö–æ–¥: –û—Ç—á—ë—Ç—ã –≤ Telegram —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏
// –û—à–∏–±–∫–∏: –û—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏, –ø–∞—Ä—Å–∏–Ω–≥–∞, –æ—Ç–ø—Ä–∞–≤–∫–∏

import fs from 'fs';
import path from 'path';
import { config } from '../config/config';
import { TelegramService, createMessageService } from '../services/telegramService';
import { screenshotService } from '../services/screenshotService';
import { browserService } from '../services/browserService';
import { visionParser } from '../services/visionParser';
import { logger } from '../utils/logger';
import { CryptoProjectData, SiteConfig } from '../types';

export class BatchSiteAnalyzer {
  private telegramService: TelegramService;
  private messageService: any;
  private telegramEnabled: boolean = false;
  private outputDir: string;

  constructor(outputDir?: string) {
    this.outputDir = outputDir || config.app.screenshotsDir;
    this.telegramService = new TelegramService(config.telegram.botToken);
    this.messageService = createMessageService(this.telegramService.getBot(), config.telegram.botToken);
    this.ensureOutputDir();
  }

  private ensureOutputDir(): void {
    if (!fs.existsSync(this.outputDir)) {
      fs.mkdirSync(this.outputDir, { recursive: true });
      logger.info(`–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: ${this.outputDir}`);
    }
  }

  private saveScreenshot(screenshot: Buffer, url: string): string {
    try {
      const urlObj = new URL(url);
      const hostname = urlObj.hostname.replace(/[^a-zA-Z0-9]/g, '_');
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const filename = `${hostname}_${timestamp}.png`;
      const filepath = path.join(this.outputDir, filename);
      
      fs.writeFileSync(filepath, screenshot);
      logger.info(`–°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filepath}`);
      return filepath;
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞', error as Error);
      return '';
    }
  }

  private loadSitesConfig(): SiteConfig[] {
    try {
      const configPath = path.join(__dirname, '../config/sites.json');
      const configData = fs.readFileSync(configPath, 'utf-8');
      return JSON.parse(configData);
    } catch (error) {
      logger.error('Failed to load sites configuration', error as Error);
      throw new Error('Failed to load sites configuration');
    }
  }

  private async analyzeSite(siteConfig: SiteConfig): Promise<CryptoProjectData | null> {
    try {
      logger.info(`Starting analysis of site: ${siteConfig.url}`);
      if (siteConfig.selector) {
        logger.info(`Using selector: ${siteConfig.selector}`);
      }
      logger.info(`Taking screenshot for: ${siteConfig.url}`);

      // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–∞–∫ –≤ visionScanner.ts
      const screenshotResult = await this.takeScreenshotWithSelector(siteConfig.url, siteConfig.selector);
      
      if (!screenshotResult.success) {
        logger.error(`Failed to take screenshot for ${siteConfig.url}: ${screenshotResult.error}`);
        return null;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
      this.saveScreenshot(screenshotResult.screenshot, siteConfig.url);

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –ø–æ–º–æ—â—å—é Vision API
      const visionData = await visionParser.parseScreenshot(screenshotResult.screenshot);
      
      if (!visionData) {
        logger.error(`Failed to parse screenshot for ${siteConfig.url}`);
        return null;
      }

      const result: CryptoProjectData = {
        ...visionData,
        url: siteConfig.url,
        timestamp: new Date(),
      };

      logger.info(`Successfully analyzed ${siteConfig.url}`);
      return result;

    } catch (error) {
      logger.error(`Error analyzing site ${siteConfig.url}`, error as Error);
      return null;
    }
  }

  private async takeScreenshotWithSelector(url: string, selector?: string): Promise<{ success: boolean; screenshot: Buffer; error?: string }> {
    const { Page } = await import('puppeteer');
    let page: any = null;

    try {
      const browser = await browserService.getBrowser();
      page = await browser.newPage();
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      page.on('error', (error: Error) => {
        logger.error(`–û—à–∏–±–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${error.message}`);
      });
      
      page.on('pageerror', (error: Error) => {
        logger.error(`JavaScript –æ—à–∏–±–∫–∞: ${error.message}`);
      });
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ viewport
      await page.setViewport({ width: 1920, height: 1080 });
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º user-agent –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
      await page.setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');
      
      // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
      await page.goto(url, { 
        waitUntil: 'networkidle2',
        timeout: 30000 
      });
      
      // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      try {
        await page.waitForFunction('document.readyState === "complete"', { timeout: 10000 });
      } catch (error) {
        logger.warn('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
      }
      
      let screenshot: Buffer;
      
      if (selector) {
        // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–µ –¥–ª—è Tailwind CSS
        const escapedSelector = selector.replace(/[#\[\]]/g, '\\$&');
        
        try {
          // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
          await page.waitForSelector(escapedSelector, { timeout: 10000 });
          
          // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
          const element = await page.$(escapedSelector);
          if (!element) {
            throw new Error(`–≠–ª–µ–º–µ–Ω—Ç —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º "${selector}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –≤—Å–µ –µ—â–µ –≤–∏–¥–∏–º
          const isVisible = await element.isVisible();
          if (!isVisible) {
            throw new Error(`–≠–ª–µ–º–µ–Ω—Ç —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º "${selector}" –Ω–µ –≤–∏–¥–∏–º`);
          }
          
          screenshot = await element.screenshot({
            type: 'png'
          }) as Buffer;
          
          logger.info(`–°–∫—Ä–∏–Ω—à–æ—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ "${selector}" —Å–æ–∑–¥–∞–Ω –¥–ª—è: ${url}`);
        } catch (selectorError) {
          logger.warn(`–°–µ–ª–µ–∫—Ç–æ—Ä "${selector}" –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–µ–ª–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç: ${(selectorError as Error).message}`);
          
          // –ï—Å–ª–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–µ–ª–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
          screenshot = await page.screenshot({
            type: 'png',
            fullPage: true,
          }) as Buffer;
        }
      } else {
        // –ü–æ–ª–Ω–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
        screenshot = await page.screenshot({
          type: 'png',
          fullPage: true,
        }) as Buffer;
      }

      return {
        success: true,
        screenshot
      };
      
    } catch (error) {
      logger.error(`Failed to take screenshot of ${url}`, error as Error);
      
      return {
        success: false,
        screenshot: Buffer.alloc(0),
        error: (error as Error).message,
      };
    } finally {
      if (page) {
        await page.close();
      }
    }
  }

  private formatTelegramMessage(data: CryptoProjectData, _screenshot: Buffer): string {
    const message = `
üîç <b>–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞</b>

üåê <b>–°–∞–π—Ç:</b> ${data.url}
üí∞ <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> ${data.currentPrice}
üìà <b>–°–ª–µ–¥—É—é—â–∞—è —Ü–µ–Ω–∞:</b> ${data.nextPrice}
üè∑Ô∏è <b>–¶–µ–Ω–∞ –ª–∏—Å—Ç–∏–Ω–≥–∞:</b> ${data.listingPrice}
üíµ <b>–°–æ–±—Ä–∞–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤:</b> ${data.raised}

‚è∞ <b>–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞:</b> ${data.timestamp.toLocaleString('ru-RU')}
    `;

    return message.trim();
  }

  private async sendToTelegram(data: CryptoProjectData, screenshot: Buffer, screenshotPath?: string): Promise<void> {
    try {
      const message = this.formatTelegramMessage(data, screenshot);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await this.messageService.sendReport(config.telegram.chatId, message);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
      await this.messageService.sendPhoto(
        config.telegram.chatId,
        screenshot,
        `–°–∫—Ä–∏–Ω—à–æ—Ç: ${data.url}${screenshotPath ? `\n–§–∞–π–ª: ${screenshotPath}` : ''}`
      );

      logger.info(`Successfully sent report to Telegram for ${data.url}`);
    } catch (error) {
      logger.error(`Failed to send report to Telegram for ${data.url}`, error as Error);
    }
  }

  async run(): Promise<void> {
    try {
      logger.info('Starting batch site analysis');

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∞–π—Ç–æ–≤
      const sites = this.loadSitesConfig();
      logger.info(`Loaded ${sites.length} sites for analysis!!`);

      // –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
      logger.info('Starting Telegram bot...');
      logger.info(`Bot token: ${config.telegram.botToken ? 'Set' : 'Missing'}`);
      logger.info(`Chat ID: ${config.telegram.chatId ? 'Set' : 'Missing'}`);
      
      try {
        await this.telegramService.start();
        this.telegramEnabled = true;
        logger.info('Telegram bot started successfully');
      } catch (error) {
        logger.error('Failed to start Telegram bot, but continuing with analysis...', error as Error);
        logger.error('Error details:', error as Error);
        this.telegramEnabled = false;
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ Telegram
      }

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–∞–π—Ç
      logger.info(`Starting analysis of ${sites.length} sites...`);
      for (const site of sites) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∞–π—Ç—ã —Å —Ñ–ª–∞–≥–æ–º skip
        logger.info(`Processing site: ${site.url}`);
        
        if (site.skip === true) {
          logger.info(`Skipping site: ${site.url} (skip flag is true)`);
          continue;
        }

        try {
          const data = await this.analyzeSite(site);
          
          if (data) {
            // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
            console.log('\n' + '='.repeat(50));
            console.log(this.formatTelegramMessage(data, Buffer.alloc(0)));
            console.log('='.repeat(50) + '\n');
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –µ—Å–ª–∏ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
            if (this.telegramEnabled) {
              try {
                const screenshotResult = await this.takeScreenshotWithSelector(site.url, site.selector);
                
                if (screenshotResult.success) {
                  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è Telegram
                  const screenshotPath = this.saveScreenshot(screenshotResult.screenshot, site.url);
                  await this.sendToTelegram(data, screenshotResult.screenshot, screenshotPath);
                } else {
                  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
                  const message = this.formatTelegramMessage(data, Buffer.alloc(0));
                  await this.messageService.sendReport(config.telegram.chatId, message);
                }
              } catch (telegramError) {
                logger.error(`Failed to send to Telegram: ${site.url}`, telegramError as Error);
              }
            }
          } else {
            // –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å
            console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∞–π—Ç: ${site.url}`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –µ—Å–ª–∏ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
            if (this.telegramEnabled) {
              try {
                await this.messageService.sendError(
                  config.telegram.chatId,
                  `–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∞–π—Ç: ${site.url}`
                );
              } catch (telegramError) {
                logger.error(`Failed to send error to Telegram: ${site.url}`, telegramError as Error);
              }
            }
          }

          // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
          await new Promise(resolve => setTimeout(resolve, 2000));

        } catch (error) {
          logger.error(`Error processing site ${site.url}`, error as Error);
          console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∞–π—Ç–∞ ${site.url}: ${(error as Error).message}`);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –µ—Å–ª–∏ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
          if (this.telegramEnabled) {
            try {
              await this.messageService.sendError(
                config.telegram.chatId,
                `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∞–π—Ç–∞ ${site.url}: ${(error as Error).message}`
              );
            } catch (telegramError) {
              logger.error(`Failed to send error to Telegram: ${site.url}`, telegramError as Error);
            }
          }
        }
      }

      logger.info('Batch site analysis completed');

    } catch (error) {
      logger.error('Failed to run batch site analysis', error as Error);
      throw error;
    } finally {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram –±–æ—Ç–∞ –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞–ø—É—â–µ–Ω
      if (this.telegramEnabled) {
        await this.telegramService.stop();
      }
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export const batchSiteAnalyzer = new BatchSiteAnalyzer();
