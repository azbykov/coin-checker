#!/usr/bin/env tsx

// –ü–æ–¥–∞–≤–ª—è–µ–º warning –æ deprecated headless
process.env['PUPPETEER_SKIP_CHROMIUM_DOWNLOAD'] = 'true';

/**
 * –°–∫–∞–Ω–µ—Ä —Å –∞–Ω–∞–ª–∏–∑–æ–º —á–µ—Ä–µ–∑ OpenAI Vision API
 * –î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç—ã, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Ö —á–µ—Ä–µ–∑ GPT-4 Vision –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 */

import 'dotenv/config';
import puppeteer, { Browser, Page } from 'puppeteer';
import { logger } from '../utils/logger';
import { writeFileSync, mkdirSync, existsSync } from 'fs';
import { join } from 'path';
import { OpenAIService, createVisionParser } from '../services/openaiService';

interface VisionScanResult {
  url: string;
  success: boolean;
  screenshotPath?: string;
  error?: string;
  processingTime: number;
  timestamp: string;
  data?: {
    currentPrice: string;
    nextPrice: string;
    listingPrice: string;
    raised: string;
  };
}

class VisionScanner {
  private browser: Browser | null = null;
  private openaiService: OpenAIService;
  private visionParser: any;
  private outputDir: string;

  constructor(outputDir = 'screenshots') {
    this.outputDir = outputDir;
    const apiKey = process.env['OPENAI_API_KEY'];
    if (!apiKey) {
      throw new Error('OPENAI_API_KEY environment variable is required');
    }
    this.openaiService = new OpenAIService(apiKey);
    this.visionParser = createVisionParser(this.openaiService.getClient());
    this.ensureOutputDir();
  }

  private ensureOutputDir(): void {
    if (!existsSync(this.outputDir)) {
      mkdirSync(this.outputDir, { recursive: true });
      logger.info(`–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: ${this.outputDir}`);
    }
  }

  async initialize(): Promise<void> {
    try {
          this.browser = await puppeteer.launch({
        headless: true,
        args: [
          '--no-sandbox',
          '--disable-setuid-sandbox',
          '--disable-dev-shm-usage',
          '--disable-gpu',
          '--disable-web-security',
          '--disable-features=VizDisplayCompositor',
          '--disable-background-timer-throttling',
          '--disable-backgrounding-occluded-windows',
          '--disable-renderer-backgrounding',
          '--disable-field-trial-config',
          '--disable-ipc-flooding-protection',
          '--no-first-run',
          '--no-default-browser-check',
          '--disable-default-apps',
          '--disable-extensions',
          '--disable-plugins',
          '--disable-sync',
          '--disable-translate',
          '--hide-scrollbars',
          '--mute-audio',
          '--no-zygote',
          '--single-process',
        ],
        timeout: 30000,
      });
      logger.info('–ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞', error as Error);
      throw error;
    }
  }

  async scanUrl(url: string, saveScreenshot = true, selector?: string): Promise<VisionScanResult> {
    const startTime = Date.now();
    let page: Page | null = null;

    try {
      if (!this.browser) {
        throw new Error('–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      }

      page = await this.browser.newPage();
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      page.on('error', (error) => {
        logger.error(`–û—à–∏–±–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${error.message}`);
      });
      
      page.on('pageerror', (error) => {
        logger.error(`JavaScript –æ—à–∏–±–∫–∞: ${error.message}`);
      });
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ viewport
      await page.setViewport({ width: 1920, height: 1080 });
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º user-agent –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
      await page.setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');
      
      // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
      await page.goto(url, { 
        waitUntil: 'networkidle2',
        timeout: 30000 
      });
      
      // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      try {
        await page.waitForFunction('document.readyState === "complete"', { timeout: 10000 });
      } catch (error) {
        logger.warn('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
      }
      
      let screenshot: string;
      
      if (selector) {
        // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
        await page.waitForSelector(selector, { timeout: 10000 });
        
        // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        const element = await page.$(selector);
        if (!element) {
          throw new Error(`–≠–ª–µ–º–µ–Ω—Ç —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º "${selector}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –≤—Å–µ –µ—â–µ –≤–∏–¥–∏–º
        const isVisible = await element.isVisible();
        if (!isVisible) {
          throw new Error(`–≠–ª–µ–º–µ–Ω—Ç —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º "${selector}" –Ω–µ –≤–∏–¥–∏–º`);
        }
        
        screenshot = await element.screenshot({
          type: 'png',
          encoding: 'base64'
        }) as string;
        
        logger.info(`–°–∫—Ä–∏–Ω—à–æ—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ "${selector}" —Å–æ–∑–¥–∞–Ω`);
      } else {
        // –ü–æ–ª–Ω–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
        screenshot = await page.screenshot({
          type: 'png',
          fullPage: true,
          encoding: 'base64'
        }) as string;
      }

      let screenshotPath: string | undefined;
      
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤ —Ñ–∞–π–ª
      if (saveScreenshot) {
        const urlObj = new URL(url);
        const hostname = urlObj.hostname.replace(/[^a-zA-Z0-9]/g, '_');
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const filename = `${hostname}_${timestamp}.png`;
        const filepath = join(this.outputDir, filename);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º base64 –≤ —Ñ–∞–π–ª
        const buffer = Buffer.from(screenshot as string, 'base64');
        writeFileSync(filepath, buffer);
        
        screenshotPath = filepath;
        logger.info(`–°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filepath}`);
      }

      // –ê–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —á–µ—Ä–µ–∑ OpenAI Vision API
      logger.info(`–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è ${url}...`);
      const buffer = Buffer.from(screenshot as string, 'base64');
      const visionResult = await this.visionParser.parseImage(buffer);
      
      const processingTime = Date.now() - startTime;

      return {
        url,
        success: true,
        ...(screenshotPath && { screenshotPath }),
        processingTime,
        timestamp: new Date().toISOString(),
        data: visionResult
      };

    } catch (error) {
      const processingTime = Date.now() - startTime;
      
      return {
        url,
        success: false,
        error: (error as Error).message,
        processingTime,
        timestamp: new Date().toISOString()
      };
    } finally {
      if (page) {
        await page.close();
      }
    }
  }

  async scanUrls(urls: string[], maxConcurrent = 2, saveScreenshots = true, selector?: string): Promise<VisionScanResult[]> {
    const results: VisionScanResult[] = [];
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ URL –±–∞—Ç—á–∞–º–∏ (–º–µ–Ω—å—à–µ concurrent –¥–ª—è OpenAI API)
    for (let i = 0; i < urls.length; i += maxConcurrent) {
      const batch = urls.slice(i, i + maxConcurrent);
      logger.info(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á ${Math.floor(i / maxConcurrent) + 1}/${Math.ceil(urls.length / maxConcurrent)}`);
      
      const batchPromises = batch.map(url => this.scanUrl(url, saveScreenshots, selector));
      const batchResults = await Promise.all(batchPromises);
      
      results.push(...batchResults);
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ (–±–æ–ª—å—à–µ –¥–ª—è OpenAI API)
      if (i + maxConcurrent < urls.length) {
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
    }
    
    return results;
  }

  async close(): Promise<void> {
    if (this.browser) {
      await this.browser.close();
      this.browser = null;
      logger.info('–ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
    }
  }

  formatResultsAsJson(results: VisionScanResult[]): string {
    const successful = results.filter(r => r.success);
    const failed = results.filter(r => !r.success);
    
    const formattedResults = {
      summary: {
        total: results.length,
        successful: successful.length,
        failed: failed.length,
        successRate: results.length > 0 ? (successful.length / results.length) * 100 : 0,
        totalTime: results.reduce((sum, r) => sum + r.processingTime, 0),
        averageTime: results.length > 0 ? Math.round(results.reduce((sum, r) => sum + r.processingTime, 0) / results.length) : 0
      },
      results: results.map(r => ({
        url: r.url,
        success: r.success,
        screenshotPath: r.screenshotPath,
        error: r.error,
        processingTime: r.processingTime,
        timestamp: r.timestamp,
        data: r.data
      }))
    };
    
    return JSON.stringify(formattedResults, null, 2);
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function main(): Promise<void> {
  const args = process.argv.slice(2);
  
  if (args.includes('--help') || args.length === 0) {
    console.log(`
üîç –°–∫–∞–Ω–µ—Ä —Å –∞–Ω–∞–ª–∏–∑–æ–º —á–µ—Ä–µ–∑ OpenAI Vision API

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  npx tsx src/scripts/visionScanner.ts <url1> <url2> ...
  npx tsx src/scripts/visionScanner.ts --file <filename>

–û–ø—Ü–∏–∏:
  --no-save              –ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –≤ —Ñ–∞–π–ª—ã
  --output-dir <path>    –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: screenshots)
  --selector <css>       CSS —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞

–ü—Ä–∏–º–µ—Ä—ã:
  npx tsx src/scripts/visionScanner.ts https://example.com https://test.com
  npx tsx src/scripts/visionScanner.ts --file urls.txt
  npx tsx src/scripts/visionScanner.ts --no-save https://example.com
  npx tsx src/scripts/visionScanner.ts --output-dir my-screenshots https://example.com
  npx tsx src/scripts/visionScanner.ts --selector ".price-section" https://example.com
  npx tsx src/scripts/visionScanner.ts --selector "#token-info" --file urls.txt

–°–µ–ª–µ–∫—Ç–æ—Ä—ã:
  .class-name          - —ç–ª–µ–º–µ–Ω—Ç —Å –∫–ª–∞—Å—Å–æ–º
  #id-name             - —ç–ª–µ–º–µ–Ω—Ç —Å ID
  [data-testid="..."]  - —ç–ª–µ–º–µ–Ω—Ç —Å data-–∞—Ç—Ä–∏–±—É—Ç–æ–º
  .parent .child       - –≤–ª–æ–∂–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
  - –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
`);
    return;
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ –æ–ø—Ü–∏–π
  const noSave = args.includes('--no-save');
  const outputDirIndex = args.indexOf('--output-dir');
  const selectorIndex = args.indexOf('--selector');
  let outputDir = 'screenshots';
  let selector: string | undefined;
  
  if (outputDirIndex !== -1) {
    outputDir = args[outputDirIndex + 1] || 'screenshots';
  }
  
  if (selectorIndex !== -1) {
    selector = args[selectorIndex + 1];
    if (!selector) {
      throw new Error('--selector —Ç—Ä–µ–±—É–µ—Ç CSS —Å–µ–ª–µ–∫—Ç–æ—Ä');
    }
  }
  
  // –§–∏–ª—å—Ç—Ä—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã (—É–±–∏—Ä–∞–µ–º –æ–ø—Ü–∏–∏)
  const filteredArgs = args.filter((arg, index) => {
    if (arg === '--no-save') return false;
    if (arg === '--output-dir') return false;
    if (arg === '--selector') return false;
    if (index > 0 && args[index - 1] === '--output-dir') return false;
    if (index > 0 && args[index - 1] === '--selector') return false;
    return true;
  });

  const scanner = new VisionScanner(outputDir);
  
  try {
    await scanner.initialize();
    
    let urls: string[] = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–ª–∞–≥ --file
    const fileIndex = filteredArgs.indexOf('--file');
    if (fileIndex !== -1) {
      const filename = filteredArgs[fileIndex + 1];
      if (!filename) {
        throw new Error('--file —Ç—Ä–µ–±—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞');
      }
      
      const fs = require('fs');
      const fileContent = fs.readFileSync(filename, 'utf8');
      urls = fileContent
        .split('\n')
        .map((line: string) => line.trim())
        .filter((line: string) => line && !line.startsWith('#'));
    } else {
      urls = filteredArgs;
    }

    console.log(`üîç –°–∫–∞–Ω–∏—Ä—É–µ–º ${urls.length} URL —Å –∞–Ω–∞–ª–∏–∑–æ–º —á–µ—Ä–µ–∑ OpenAI Vision...`);
    console.log(`üìÅ –°–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: ${outputDir}`);
    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤: ${noSave ? '–æ—Ç–∫–ª—é—á–µ–Ω–æ' : '–≤–∫–ª—é—á–µ–Ω–æ'}`);
    if (selector) {
      console.log(`üéØ –°–µ–ª–µ–∫—Ç–æ—Ä: ${selector}`);
    }
    console.log('');
    
    const results = await scanner.scanUrls(urls, 2, !noSave, selector);
    const jsonResult = scanner.formatResultsAsJson(results);
    
    console.log(jsonResult);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', (error as Error).message);
    process.exit(1);
  } finally {
    await scanner.close();
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main().catch((error) => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

export { VisionScanner }; 