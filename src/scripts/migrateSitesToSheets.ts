// TODO: –ó–∞–¥–∞—á–∞ - –ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∞–π—Ç–æ–≤ –≤ Google Sheets
// –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ sites.json –≤ Google Sheets –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
// –í—Ö–æ–¥: sites.json —Ñ–∞–π–ª
// –í—ã—Ö–æ–¥: –î–∞–Ω–Ω—ã–µ –≤ Google Sheets –Ω–∞ –ª–∏—Å—Ç–µ SitesConfig
// –û—à–∏–±–∫–∏: –û—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞, –∑–∞–ø–∏—Å–∏ –≤ Google Sheets

import fs from 'fs';
import path from 'path';
import { config } from '../config/config';
import { GoogleSheetsService } from '../services/googleSheetsService';
import { logger } from '../utils/logger';

async function migrateSitesToSheets(): Promise<void> {
  try {
    logger.info('Starting migration of sites configuration to Google Sheets...');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Sheets —Å–µ—Ä–≤–∏—Å
    const googleSheetsService = new GoogleSheetsService(config.googleSheets);
    await googleSheetsService.initialize();

    // –ß–∏—Ç–∞–µ–º sites.json
    const sitesJsonPath = path.join(__dirname, '../config/sites.json');
    const sitesData = JSON.parse(fs.readFileSync(sitesJsonPath, 'utf-8'));

    logger.info(`Found ${sitesData.length} sites in sites.json`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
    await googleSheetsService.saveSitesConfig(sitesData);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    const loadedConfig = await googleSheetsService.loadSitesConfig();
    logger.info(`Verification: loaded ${loadedConfig.length} sites from Google Sheets`);

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    await googleSheetsService.close();

    logger.info('Migration completed successfully! üéâ');
    logger.info('');
    logger.info('üìã Next steps for managers:');
    logger.info('1. Open your Google Sheets document');
    logger.info('2. Go to the "SitesConfig" tab');
    logger.info('3. Edit configurations directly in the spreadsheet');
    logger.info('4. Use TRUE/FALSE for Skip and Wallet columns');
    logger.info('5. Use JSON format for complex fields (Selectors, JSON API Config, Custom Data)');
    logger.info('');
    logger.info('üí° The application will now read configuration from Google Sheets instead of sites.json');

  } catch (error) {
    logger.error('Migration failed', error as Error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  migrateSitesToSheets().catch(console.error);
}

export { migrateSitesToSheets };
