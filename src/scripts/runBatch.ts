#!/usr/bin/env tsx

/**
 * CLI —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * npx tsx src/scripts/runBatch.ts [–æ–ø—Ü–∏–∏] <url1> <url2> ...
 * 
 * –û–ø—Ü–∏–∏:
 * --telegram - –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Telegram
 * --no-save - –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
 * --max-concurrent <—á–∏—Å–ª–æ> - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
 * --json - –≤—ã–≤–æ–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
 * --help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
 */

import { batchProcessor } from './batchProcessor';
import { logger } from '../utils/logger';
import { readFileSync } from 'fs';

interface CliOptions {
  telegram: boolean;
  saveToFile: boolean;
  maxConcurrent: number;
  jsonOutput: boolean;
  help: boolean;
}

function parseArguments(): { urls: string[]; options: CliOptions } {
  const args = process.argv.slice(2);
  const options: CliOptions = {
    telegram: false,
    saveToFile: true,
    maxConcurrent: 3,
    jsonOutput: false,
    help: false
  };
  
  const urls: string[] = [];
  
  for (let i = 0; i < args.length; i++) {
    const arg = args[i];
    
    switch (arg) {
      case '--telegram':
        options.telegram = true;
        break;
      case '--no-save':
        options.saveToFile = false;
        break;
      case '--max-concurrent':
        const maxConcurrentValue = args[i + 1];
        if (!maxConcurrentValue) {
          throw new Error('--max-concurrent —Ç—Ä–µ–±—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ');
        }
        const maxConcurrent = parseInt(maxConcurrentValue, 10);
        if (isNaN(maxConcurrent) || maxConcurrent < 1) {
          throw new Error('--max-concurrent —Ç—Ä–µ–±—É–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ');
        }
        options.maxConcurrent = maxConcurrent;
        i++; // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç
        break;
      case '--json':
        options.jsonOutput = true;
        break;
      case '--help':
        options.help = true;
        break;
      case '--file':
        // –ß–∏—Ç–∞–µ–º URL –∏–∑ —Ñ–∞–π–ª–∞
        const filename = args[i + 1];
        if (!filename) {
          throw new Error('--file —Ç—Ä–µ–±—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞');
        }
        try {
          const fileContent = readFileSync(filename, 'utf8');
          const fileUrls = fileContent
            .split('\n')
            .map(line => line.trim())
            .filter(line => line && !line.startsWith('#'));
          urls.push(...fileUrls);
        } catch (error) {
          throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª ${filename}: ${error}`);
        }
        i++; // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç
        break;
      default:
        if (arg && arg.startsWith('--')) {
          throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: ${arg}`);
        }
        if (arg) {
          urls.push(arg);
        }
        break;
    }
  }
  
  return { urls, options };
}

function showHelp(): void {
  console.log(`
ü™ô Crypto Checker - –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ URL

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  npx tsx src/scripts/runBatch.ts [–æ–ø—Ü–∏–∏] <url1> <url2> ...

–û–ø—Ü–∏–∏:
  --telegram              –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Telegram
  --no-save              –ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
  --max-concurrent <N>   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 3)
  --json                 –í—ã–≤–æ–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
  --file <filename>      –ß–∏—Ç–∞—Ç—å URL –∏–∑ —Ñ–∞–π–ª–∞ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)
  --help                 –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ URL
  npx tsx src/scripts/runBatch.ts https://example-ico.com https://test-launchpad.io

  # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å URL –∏–∑ —Ñ–∞–π–ª–∞
  npx tsx src/scripts/runBatch.ts --file examples/sample-urls.txt

  # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Telegram
  npx tsx src/scripts/runBatch.ts --telegram https://example-ico.com

  # –í—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON
  npx tsx src/scripts/runBatch.ts --json https://example-ico.com

  # –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º
  npx tsx src/scripts/runBatch.ts --max-concurrent 5 https://example-ico.com
`);
}

async function main(): Promise<void> {
  try {
    const { urls, options } = parseArguments();
    
    if (options.help) {
      showHelp();
      return;
    }
    
    if (urls.length === 0) {
      console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω—ã URL –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
      console.log('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏');
      process.exit(1);
    }
    
    logger.info(`üöÄ –ó–∞–ø—É—Å–∫ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${urls.length} URL`);
    logger.info(`üìä –û–ø—Ü–∏–∏: Telegram=${options.telegram}, –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ=${options.saveToFile}, –ü–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º=${options.maxConcurrent}`);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ URL
    const results = await batchProcessor.processUrls(urls, {
      sendToTelegram: options.telegram,
      saveToFile: options.saveToFile,
      maxConcurrent: options.maxConcurrent
    });
    
    // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if (options.jsonOutput) {
      const jsonResult = batchProcessor.formatResultsAsJson(results);
      console.log(jsonResult);
    } else {
      // –ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤—ã–≤–æ–¥
      const successful = results.filter(r => r.success);
      const failed = results.filter(r => !r.success);
      
      console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:');
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successful.length}`);
      console.log(`‚ùå –û—à–∏–±–æ–∫: ${failed.length}`);
      console.log(`üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${results.length > 0 ? ((successful.length / results.length) * 100).toFixed(1) : 0}%`);
      
      if (successful.length > 0) {
        console.log('\n‚úÖ –£—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
        successful.forEach((result, index) => {
          const data = result.data!;
          console.log(`  ${index + 1}. ${result.url}`);
          console.log(`     üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${data.currentPrice}`);
          console.log(`     üìà –¶–µ–Ω–∞ –ª–∏—Å—Ç–∏–Ω–≥–∞: ${data.listingPrice}`);
          console.log(`     üíµ –°–æ–±—Ä–∞–Ω–æ: ${data.raised}`);
          console.log(`     ‚è±Ô∏è –í—Ä–µ–º—è: ${result.processingTime}–º—Å`);
          console.log('');
        });
      }
      
      if (failed.length > 0) {
        console.log('\n‚ùå –û—à–∏–±–∫–∏:');
        failed.forEach((result, index) => {
          console.log(`  ${index + 1}. ${result.url}: ${result.error}`);
        });
      }
    }
    
    logger.info('‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞', error as Error);
    console.error(`‚ùå –û—à–∏–±–∫–∞: ${(error as Error).message}`);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main().catch((error) => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
} 